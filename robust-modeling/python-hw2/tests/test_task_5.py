import string
from solutions.task_5 import StringMinus


def test_StringMinus():
    assert str(StringMinus("qwertyerty") - StringMinus("ttttr")) == "qweyery"

    A, B = StringMinus(list(range(5, 15))), StringMinus(list(range(8, 17)))
    assert A - B == "7, "
    assert B - A == "11"

    S, T = StringMinus(list(range(15, 27))), StringMinus(tuple(range(20, 55, 3)))
    assert S - T == "[111112226]"
    assert T - S == "(333444053)"
    assert S * 2 - T * 3 == "[111][11111126]"
    assert S[2:-2] - T[6:-6] == "11101222, 2, 2"
    assert S.replace(",", ";") - T == "[;1;1;1;1;;1;;;2;2;26]"
    assert (
        S.replace(StringMinus(","), StringMinus("-=-")) - T
        == "[-=-1-=-1-=-1-=-1-=--=-1-=--=--=-2-=-2-=-26]"
    )
    assert T.count(S[-6]) == 3
    assert T[3:5] in S

    S = StringMinus("NOTE: gravity is a myth, the Earth sucks.")
    assert S - string.ascii_lowercase == "NOTE:  i a yt, th Earth ss."
    assert (
        string.digits + S - string.ascii_uppercase
        == "0123456789: gravity is a myth, the Earth sucks."
    )

    S = StringMinus("NOTE: gravity is a myth, the Earth sucks.")
    attrs = ["isprintable", "upper", "title", "swapcase", "capitalize", "isascii"]
    res = [
        True,
        "NOTE: GRAVITY IS A MYTH, THE EARTH SUCKS.",
        "Note: Gravity Is A Myth, The Earth Sucks.",
        "note: GRAVITY IS A MYTH, THE eARTH SUCKS.",
        "Note: gravity is a myth, the earth sucks.",
        True,
    ]
    for i in range(len(attrs)):
        assert getattr(S, attrs[i])() == res[i]

    S = StringMinus
    assert "guilty" in S("Suspicion always haunts the guilty mind.")
    assert S("guilty") in S("Suspicion always haunts the guilty mind.")
    assert S("Suspicion").center(20, ".") - "pipi..." == "..Suscon......"
    assert S("__subclasshook__").strip("_") - "ice bus" == "lasshook"
    assert S("__subclasshook__").endswith("hook__")

    N = 1000
    S1 = StringMinus("_".join(f"({x:04x}):" for x in range(N)))
    S2 = StringMinus(
        "_" * (N - 3)
        + "():" * (N - 2)
        + "0" * (N * 5 // 4)
        + "123" * (N * 10 // 45)
        + string.digits * (N // 8)
        + string.ascii_lowercase * (N // 5)
    )
    assert (
        S1 - S2
        == "111112222212111121111111111111221222222222222222121212121212121212121245678933330031032033034035_(036):_(037):"
    )

    N = 10000
    S1 = StringMinus("_".join(f"({x:04x}):" for x in range(N)))
    S2 = StringMinus(
        "_" * (N - 3)
        + "():" * (N - 2)
        + "0" * (N * 5 // 4)
        + "123" * (N * 10 // 45)
        + string.digits * (N // 8)
        + string.ascii_lowercase * (N // 5)
    )
    assert (
        S1 - S2

    )
